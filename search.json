[{"title":"淘天面经","url":"https://zyyy9.github.io/2025/04/17/淘天面经/","content":"<h1 id=\"淘天2025-02算法实习面试\"><a href=\"#淘天2025-02算法实习面试\" class=\"headerlink\" title=\"淘天2025.02算法实习面试\"></a>淘天2025.02算法实习面试</h1><ol>\n<li>长下文场景，怎么进行位置编码 </li>\n<li>ppo和dpo的区别  </li>\n<li>deepseek grop具体怎么做的  </li>\n<li>deepseek的创新点有哪些</li>\n<li>deepseek mla和多头自注意力的区别</li>\n<li>为什么设计多头自注意力，为什么多头可以捕获不同的语义以及其参数开销怎么样  </li>\n<li>多模态大模型具体是怎么训练的</li>\n<li>多模态强化学习和纯语言强化学习的区别</li>\n<li>sft和强化学习的优劣</li>\n<li>数字错误有哪些解决方法，为什么现有的模型没有更改tokenizer单独切分数字？</li>\n<li>moe是怎么做的  </li>\n<li>moe具体是怎么分配路由  </li>\n<li>怎么用agent做数学题</li>\n<li>rule-based reward是什么</li>\n</ol>\n<p><strong>代码题：</strong><br>bfs走迷宫</p>\n","categories":["面经"],"tags":[]},{"title":"大模型数理相关","url":"https://zyyy9.github.io/2025/03/31/大模型数理相关/","content":"<h2 id=\"矩阵求导\"><a href=\"#矩阵求导\" class=\"headerlink\" title=\"矩阵求导\"></a>矩阵求导</h2><p>对矩阵求导比较复杂 （暂时不考虑）<br>对向量求导分为：<strong>分母布局 以及 分子布局</strong>.<br><strong><em>不要混用两种布局</em></strong></p>\n<h3 id=\"两种布局（尽量使用分母布局）\"><a href=\"#两种布局（尽量使用分母布局）\" class=\"headerlink\" title=\"两种布局（尽量使用分母布局）\"></a>两种布局（尽量使用分母布局）</h3><p><strong>分母布局：结果的行数与分母一样</strong><br>分子布局：结果的行数和分子一样，是分母布局的转置</p>\n","categories":["LLM基础"],"tags":[]},{"title":"LoRA相关","url":"https://zyyy9.github.io/2025/03/31/LoRA相关/","content":"<h2 id=\"找到-LoRA-的核心文件\"><a href=\"#找到-LoRA-的核心文件\" class=\"headerlink\" title=\"找到 LoRA 的核心文件\"></a>找到 LoRA 的核心文件</h2><p>最新版本 LoraModel 继承自 BaseTuner，核心是<code>_create_and_replace</code>函数中的<code>target.update_layer</code>函数</p>\n<p>最后找到\\peft\\tuners\\lora\\layer.py，进行修改即可</p>\n","categories":["LLM基础"],"tags":[]},{"title":"LLM训练相关","url":"https://zyyy9.github.io/2025/03/31/LLM训练相关/","content":"<h2 id=\"大模型显存占用（以-1B-参数为例）\"><a href=\"#大模型显存占用（以-1B-参数为例）\" class=\"headerlink\" title=\"大模型显存占用（以 1B 参数为例）\"></a>大模型显存占用（以 1B 参数为例）</h2><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi>B</mi><mo>=</mo><msup><mn>1000</mn><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">1B=1000^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">100</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> 参数量\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi>G</mi><mi>B</mi><mo>=</mo><msup><mn>1024</mn><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">1GB=1024^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">GB</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">102</span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> Bytes\n\n<h3 id=\"全参数训练（混合精度）\"><a href=\"#全参数训练（混合精度）\" class=\"headerlink\" title=\"全参数训练（混合精度）\"></a>全参数训练（混合精度）</h3><ol>\n<li>模型参数(FP16)：2GB</li>\n<li>梯度(FP16)：2GB</li>\n<li>优化器状态（Adam 优化器 FP32）：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>∗</mo><mn>4</mn><mi>G</mi><mi>B</mi><mo>+</mo><mn>4</mn><mi>G</mi><mi>B</mi><mo>=</mo><mn>12</mn><mi>G</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">2*4GB+4GB=12GB</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">GB</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">GB</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">12</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">GB</span></span></span></span><br>(因为 FP16 精度不够，优化器动量+模型参数)</li>\n<li>激活值(FP16)：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∗</mo><mi>b</mi><mo>∗</mo><mi>h</mi><mo>∗</mo><mo stretchy=\"false\">(</mo><mn>34</mn><mo>+</mo><mn>5</mn><mo>∗</mo><mi>a</mi><mo>∗</mo><mi>s</mi><mi mathvariant=\"normal\">/</mi><mi>h</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>L</mi><mi mathvariant=\"normal\">/</mi><mn>1024</mn><mi mathvariant=\"normal\">/</mi><mn>1024</mn><mi mathvariant=\"normal\">/</mi><mn>1024</mn></mrow><annotation encoding=\"application/x-tex\">s*b*h*(34+5*a*s/h)*L/1024/1024/1024</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">34</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\">/1024/1024/1024</span></span></span></span><br><strong><em>s 是序列长度，b 是 batchsize，h 是隐藏层大小，a 是 attention 头个数，L 是层数</em></strong></li>\n</ol>\n<h3 id=\"LoRA-微调（混合精度）\"><a href=\"#LoRA-微调（混合精度）\" class=\"headerlink\" title=\"LoRA 微调（混合精度）\"></a>LoRA 微调（混合精度）</h3><ol>\n<li>模型参数：2GB+LoRA 参数（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>∗</mo><mn>0.1</mn><mi>G</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">2*0.1GB</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">0.1</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">GB</span></span></span></span>）</li>\n<li>梯度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>∗</mo><mn>0.1</mn><mi>G</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">2*0.1GB</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">0.1</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">GB</span></span></span></span></li>\n<li>优化器状态（Adam 优化器 FP32）：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>12</mn><mo>∗</mo><mn>0.1</mn><mi>G</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">12*0.1GB</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">12</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">0.1</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">GB</span></span></span></span></li>\n<li>激活值：</li>\n</ol>\n<h3 id=\"gradient-checkpoints\"><a href=\"#gradient-checkpoints\" class=\"headerlink\" title=\"gradient checkpoints\"></a>gradient checkpoints</h3><p><strong>是的！</strong> 计算机在进行数值运算时，<strong>中间计算结果</strong> <strong>不一定</strong> 会占用显存，具体情况取决于以下几个因素：  </p>\n<ol>\n<li><p><strong>计算结果是否需要被存储</strong> 🔥  </p>\n<ul>\n<li><strong>不存储</strong>：如果计算结果只是<strong>临时值</strong>，那么它会被存放在<strong>寄存器（registers）</strong> 或 <strong>缓存（cache）</strong> 里，不会进入显存。  </li>\n<li><strong>需要存储</strong>：如果计算结果稍后还要被使用（比如用于反向传播的激活值），就必须存到显存（VRAM）。</li>\n</ul>\n</li>\n<li><p><strong>计算是在 CPU 还是 GPU 上进行</strong> 🖥️🎮  </p>\n<ul>\n<li><strong>CPU 计算</strong>：临时值通常存在 CPU 的<strong>寄存器</strong> 或 <strong>RAM</strong>，只有必要时才写回到内存。  </li>\n<li><strong>GPU 计算</strong>：数值运算通常在<strong>寄存器</strong> 或 <strong>共享内存</strong> 中进行，<strong>只有需要长期存储的值才会进入显存（VRAM）</strong>。</li>\n</ul>\n</li>\n<li><p><strong>是否启用了显存优化策略（如梯度检查点）</strong> 🚀  </p>\n<ul>\n<li>默认情况下，<strong>所有中间激活值都会存到显存</strong>，以便反向传播计算梯度。  </li>\n<li>如果启用 <strong>梯度检查点（Gradient Checkpointing）</strong>，前向传播的激活值<strong>不会存储</strong>，显存占用会减少，但反向传播时要重新计算一次。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"💡-举个例子：\"><a href=\"#💡-举个例子：\" class=\"headerlink\" title=\"💡 举个例子：\"></a><strong>💡 举个例子：</strong></h3><p>假设我们执行如下计算：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\">x = torch.tensor([<span class=\"number\">3.0</span>], requires_grad=<span class=\"literal\">True</span>)</span><br><span class=\"line\">y = x * <span class=\"number\">2</span>  <span class=\"comment\"># y = 6</span></span><br><span class=\"line\">z = y ** <span class=\"number\">2</span>  <span class=\"comment\"># z = 36</span></span><br></pre></td></tr></table></figure>\n<p><strong>情况 1️⃣：普通计算（不会占用显存）</strong></p>\n<ul>\n<li><code>x * 2</code> 的结果 <code>y=6</code> <strong>可能仅存于寄存器</strong>（临时计算结果）。</li>\n<li><code>y ** 2</code> 的计算完成后，<code>y=6</code> <strong>不再被需要</strong>，它的值会被丢弃。</li>\n</ul>\n<p><strong>情况 2️⃣：需要反向传播（占用显存）</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z.backward()  <span class=\"comment\"># 计算 dL/dx</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>由于 <code>z</code> 依赖于 <code>y</code>，而 <code>y</code> 依赖于 <code>x</code>，<strong>PyTorch 需要存储计算图（computation graph）</strong>，这些中间值（如 <code>y=6</code>）就会被<strong>存到显存</strong>。</li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><p>✅ <strong>纯计算（如 <code>a + b</code>）的中间结果</strong>通常不会直接占用显存，因为它们只在寄存器&#x2F;缓存中短暂存在。<br>✅ <strong>只有当计算结果需要被存储（如激活值用于反向传播）时，才会占用显存！</strong><br>✅ <strong>显存优化（如梯度检查点）可以减少存储的中间值，但计算量会增加</strong>。  </p>\n<p>如果你的显存不够，可以考虑 <strong>梯度检查点（gradient_checkpointing_enable()）</strong> 或者 <strong>减少 batch size</strong>！ 🚀</p>\n","categories":["LLM基础"],"tags":[]},{"title":"python语法","url":"https://zyyy9.github.io/2025/03/31/python语法/","content":"<h1 id=\"函数传递参数\"><a href=\"#函数传递参数\" class=\"headerlink\" title=\"函数传递参数\"></a>函数传递参数</h1><p>你问得太好了！这个“<code>kw1</code> 为什么可以传”背后牵扯到 Python 函数参数定义的顺序规则，尤其是 <code>*args</code> 后面的部分。</p>\n<p>咱们就用这段函数定义来详细解释：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">pos1, pos2, /, arg1, arg2=<span class=\"number\">2</span>, *args, kw1, kw2=<span class=\"number\">3</span>, **kwargs</span>):</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"🔍-拆解一下每一段的含义：\"><a href=\"#🔍-拆解一下每一段的含义：\" class=\"headerlink\" title=\"🔍 拆解一下每一段的含义：\"></a>🔍 拆解一下每一段的含义：</h2><table>\n<thead>\n<tr>\n<th>部分</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>pos1, pos2, /</code></td>\n<td>这两个参数只能通过 <strong>位置传参</strong>，不能用关键字。这个语法是 Python 3.8+ 才支持的。</td>\n</tr>\n<tr>\n<td><code>arg1, arg2=2</code></td>\n<td>可以通过位置或关键字传参，有默认值的就是可选的。</td>\n</tr>\n<tr>\n<td><code>*args</code></td>\n<td>接收任意个的位置参数，打包成元组。</td>\n</tr>\n<tr>\n<td><code>kw1, kw2=3</code></td>\n<td>❗这些参数必须用<strong>关键字传参</strong>（不能位置传参），因为在 <code>*args</code> 之后定义了。</td>\n</tr>\n<tr>\n<td><code>**kwargs</code></td>\n<td>接收多余的关键字参数，打包成字典。</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"🎯-回答你的问题：\"><a href=\"#🎯-回答你的问题：\" class=\"headerlink\" title=\"🎯 回答你的问题：\"></a>🎯 回答你的问题：</h2><blockquote>\n<p>为什么 <code>kw1</code> 必须用关键字传，而不能直接当作普通位置参数？</p>\n</blockquote>\n<h3 id=\"👉-原因：\"><a href=\"#👉-原因：\" class=\"headerlink\" title=\"👉 原因：\"></a>👉 原因：</h3><p>因为 <strong><code>kw1</code> 出现在 <code>*args</code> 后面</strong>。</p>\n<ul>\n<li>函数中只要出现了 <code>*args</code>（或者你明确写了 <code>*</code>），</li>\n<li>那么后面所有的参数都<strong>只能用关键字</strong>来传。</li>\n</ul>\n<p>这是一种非常清晰的方式，让你强制用关键字传递那些更难读懂或者需要明确命名的参数。</p>\n<hr>\n<h2 id=\"🔧-举个完整的例子：\"><a href=\"#🔧-举个完整的例子：\" class=\"headerlink\" title=\"🔧 举个完整的例子：\"></a>🔧 举个完整的例子：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">example</span>(<span class=\"params\">a, b=<span class=\"number\">2</span>, *args, kw1, kw2=<span class=\"number\">5</span>, **kwargs</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;a = <span class=\"subst\">&#123;a&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;b = <span class=\"subst\">&#123;b&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;args = <span class=\"subst\">&#123;args&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;kw1 = <span class=\"subst\">&#123;kw1&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;kw2 = <span class=\"subst\">&#123;kw2&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;kwargs = <span class=\"subst\">&#123;kwargs&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"✅-合法的调用：\"><a href=\"#✅-合法的调用：\" class=\"headerlink\" title=\"✅ 合法的调用：\"></a>✅ 合法的调用：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, kw1=<span class=\"string\">&quot;hello&quot;</span>, debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\">b = 10</span><br><span class=\"line\">args = (20, 30)</span><br><span class=\"line\">kw1 = hello</span><br><span class=\"line\">kw2 = 5</span><br><span class=\"line\">kwargs = &#123;&#x27;debug&#x27;: True&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"❌-不合法的调用（会报错）：\"><a href=\"#❌-不合法的调用（会报错）：\" class=\"headerlink\" title=\"❌ 不合法的调用（会报错）：\"></a>❌ 不合法的调用（会报错）：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"string\">&quot;oops&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># TypeError: example() takes 2 positional arguments but 5 were given</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"✅-小总结：\"><a href=\"#✅-小总结：\" class=\"headerlink\" title=\"✅ 小总结：\"></a>✅ 小总结：</h2><ul>\n<li><code>kw1</code> 是在 <code>*args</code> 后面，所以 <strong>只能</strong>用 <code>kw1=值</code> 的方式传；</li>\n<li>如果你不给它传值，就会报错；</li>\n<li>这是 Python 提供的一种方式，强制你用更清晰的调用方式（显式关键字）来传某些重要参数。</li>\n</ul>\n<hr>\n<h1 id=\"默认值参数与关键字参数的区别\"><a href=\"#默认值参数与关键字参数的区别\" class=\"headerlink\" title=\"默认值参数与关键字参数的区别\"></a>默认值参数与关键字参数的区别</h1><p>你问得太到位了！<strong>默认值参数</strong> 和 <strong>关键字参数</strong> 很容易混淆，但其实它们是<strong>不同维度</strong>的概念，下面我来帮你彻底厘清 👇</p>\n<hr>\n<h2 id=\"🧠-关键词先导图\"><a href=\"#🧠-关键词先导图\" class=\"headerlink\" title=\"🧠 关键词先导图\"></a>🧠 关键词先导图</h2><table>\n<thead>\n<tr>\n<th>概念</th>\n<th>是“参数的定义方式”还是“传参方式”？</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>默认值参数</td>\n<td>✅ 是“参数的定义方式”</td>\n</tr>\n<tr>\n<td>关键字参数</td>\n<td>✅ 是“参数的传参方式”</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"🔍-1-默认值参数（Default-Parameter）\"><a href=\"#🔍-1-默认值参数（Default-Parameter）\" class=\"headerlink\" title=\"🔍 1. 默认值参数（Default Parameter）\"></a>🔍 1. 默认值参数（Default Parameter）</h2><h3 id=\"👉-定义上说的，是“参数在函数定义时是否设置了默认值”。\"><a href=\"#👉-定义上说的，是“参数在函数定义时是否设置了默认值”。\" class=\"headerlink\" title=\"👉 定义上说的，是“参数在函数定义时是否设置了默认值”。\"></a>👉 定义上说的，是“<strong>参数在函数定义时是否设置了默认值</strong>”。</h3><h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">greet</span>(<span class=\"params\">name, age=<span class=\"number\">18</span></span>):</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>这里：</p>\n<ul>\n<li><code>name</code> 是普通参数（必须传）</li>\n<li><code>age=18</code> 是默认值参数（可传可不传）</li>\n</ul>\n<hr>\n<h3 id=\"✅-使用方式：\"><a href=\"#✅-使用方式：\" class=\"headerlink\" title=\"✅ 使用方式：\"></a>✅ 使用方式：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">greet(<span class=\"string\">&quot;Alice&quot;</span>)          <span class=\"comment\"># age 会自动用默认值 18</span></span><br><span class=\"line\">greet(<span class=\"string\">&quot;Bob&quot;</span>, <span class=\"number\">25</span>)        <span class=\"comment\"># age 传了 25，会覆盖默认值</span></span><br></pre></td></tr></table></figure>\n\n<p>🧠 <strong>重点</strong>：默认值参数是为了<strong>让参数变得可选</strong>，简化调用。</p>\n<hr>\n<h2 id=\"🔍-2-关键字参数（Keyword-Argument）\"><a href=\"#🔍-2-关键字参数（Keyword-Argument）\" class=\"headerlink\" title=\"🔍 2. 关键字参数（Keyword Argument）\"></a>🔍 2. 关键字参数（Keyword Argument）</h2><h3 id=\"👉-是指你在调用函数时，用-key-value-的形式传参。\"><a href=\"#👉-是指你在调用函数时，用-key-value-的形式传参。\" class=\"headerlink\" title=\"👉 是指你在调用函数时，用 key=value 的形式传参。\"></a>👉 是指你在<strong>调用函数时</strong>，用 <code>key=value</code> 的形式传参。</h3><h3 id=\"示例：-1\"><a href=\"#示例：-1\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">greet</span>(<span class=\"params\">name, age</span>):</span><br><span class=\"line\">    ...</span><br><span class=\"line\">greet(name=<span class=\"string\">&quot;Alice&quot;</span>, age=<span class=\"number\">25</span>)   <span class=\"comment\"># 用关键字方式传参</span></span><br></pre></td></tr></table></figure>\n\n<p>这里你传的是 <strong>关键字参数</strong>，但 <code>age</code> 可能根本不是默认值参数哦！</p>\n<hr>\n<h3 id=\"✅-关键字参数可以传给任何非-args-的参数，只要名字对上就行。\"><a href=\"#✅-关键字参数可以传给任何非-args-的参数，只要名字对上就行。\" class=\"headerlink\" title=\"✅ 关键字参数可以传给任何非 *args 的参数，只要名字对上就行。\"></a>✅ 关键字参数可以传给任何非 <code>*args</code> 的参数，只要名字对上就行。</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hello</span>(<span class=\"params\">a, b, c</span>):</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">hello(a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>, c=<span class=\"number\">3</span>)  <span class=\"comment\"># 这些全是关键字参数</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"🔄-对比总结\"><a href=\"#🔄-对比总结\" class=\"headerlink\" title=\"🔄 对比总结\"></a>🔄 对比总结</h2><table>\n<thead>\n<tr>\n<th>比较点</th>\n<th>默认值参数</th>\n<th>关键字参数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>是定义时的概念？</td>\n<td>✅ 是</td>\n<td>❌ 不是</td>\n</tr>\n<tr>\n<td>是调用时的方式？</td>\n<td>❌ 不是</td>\n<td>✅ 是</td>\n</tr>\n<tr>\n<td>是否有默认值？</td>\n<td>✅ 有默认值（可选）</td>\n<td>❌ 不一定，关键字参数可传任意参数</td>\n</tr>\n<tr>\n<td>示例</td>\n<td><code>def foo(a=1)</code></td>\n<td><code>foo(a=1)</code></td>\n</tr>\n<tr>\n<td>本质作用</td>\n<td>给参数提供备选值</td>\n<td>显式指定要给哪个参数传值</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"🧪-小测试题：判断哪一项是默认值参数，哪一项是关键字参数\"><a href=\"#🧪-小测试题：判断哪一项是默认值参数，哪一项是关键字参数\" class=\"headerlink\" title=\"🧪 小测试题：判断哪一项是默认值参数，哪一项是关键字参数\"></a>🧪 小测试题：判断哪一项是默认值参数，哪一项是关键字参数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">x, y=<span class=\"number\">10</span>, *args, z=<span class=\"number\">20</span>, **kwargs</span>):</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, z=<span class=\"number\">30</span>, debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>分析：</p>\n<ul>\n<li><code>y=10</code>, <code>z=20</code> → ✅ 默认值参数（定义时设了默认）</li>\n<li><code>z=30</code>, <code>debug=True</code> → ✅ 关键字参数（调用时 key&#x3D;value）</li>\n<li><code>1, 2, 3, 4</code> → ✅ 位置参数（按顺序给 x, y, *args）</li>\n</ul>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">a, b=<span class=\"number\">1</span> ,c=<span class=\"number\">2</span>, *args, d=<span class=\"number\">2</span>, e, **kargs</span>)</span><br></pre></td></tr></table></figure>\n<p>*<strong>args后面必须用关键字参数传递</strong></p>\n","categories":["python语法"],"tags":[]},{"title":"anaconda、pytorch、jupyter环境配置","url":"https://zyyy9.github.io/2023/06/30/pytorch环境配置/","content":"<h1 id=\"下载-anaconda3\"><a href=\"#下载-anaconda3\" class=\"headerlink\" title=\"下载 anaconda3\"></a>下载 anaconda3</h1><p>anaconda 可以管理 python 环境，通过创建不同的子环境，适应不同的需求，只需要切换到对应的环境中即可。</p>\n<p>_创建环境_：<code>conda  create -n 环境名 python=版本号</code><br>_激活环境_：<code>conda activate 环境名</code><br>_取消激活环境_：<code>conda deactivate</code></p>\n<p>官网：&lt;<a href=\"http://www.anaconda.com>\">www.anaconda.com&gt;</a></p>\n<h1 id=\"安装-pytorch\"><a href=\"#安装-pytorch\" class=\"headerlink\" title=\"安装 pytorch\"></a>安装 pytorch</h1><p>_下载安装(cpu 版)_：<code>pip3 install torch torchvision torchaudio</code><br>_验证 pytorch 是否安装成功_：进入 python 运行状态，<code>import torch</code><br>_验证 gpu_：<code>torch.cuda.is_available()</code></p>\n<p>官网：<a href=\"https://pytorch.org/\">https://pytorch.org/</a></p>\n<h1 id=\"安装-jupyter\"><a href=\"#安装-jupyter\" class=\"headerlink\" title=\"安装 jupyter\"></a>安装 jupyter</h1><p>安装 anaconda 的过程中已经在默认环境中装上了 jupyter 应用程序，现在需要将 jupyter 添加到 pytorch 环境中，激活环境，执行<code>conda install nb_conda</code>或者<code>conda install nb_conda_kernels</code>，再在该环境中执行<code>jupyter notebook</code>启动 jupyter，发现虚拟环境已被添加。<br><strong>启动时终端可能会报错，此时需要<code>pip install web??(忘记是什么包了)</code>，要安装一个包才行</strong></p>\n<h2 id=\"修改-jupyter-工程目录\"><a href=\"#修改-jupyter-工程目录\" class=\"headerlink\" title=\"修改 jupyter 工程目录\"></a>修改 jupyter 工程目录</h2><p>统一到一个目录下，<a href=\"https://blog.csdn.net/weixin_42165744/article/details/127424690\">https://blog.csdn.net/weixin_42165744/article/details/127424690</a></p>\n<h1 id=\"import-numpy-时可能报错\"><a href=\"#import-numpy-时可能报错\" class=\"headerlink\" title=\"import numpy 时可能报错\"></a>import numpy 时可能报错</h1><p>需要修改 numpy 版本，我改为<code>pip3 install numpy==1.20.0</code>即可，(直接安装版本是 1.25.0)<br>参考博客：<a href=\"https://blog.csdn.net/one_super_dreamer/article/details/104612443?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-104612443-blog-109199889.235%5Ev38%5Epc_relevant_default_base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-104612443-blog-109199889.235%5Ev38%5Epc_relevant_default_base&amp;utm_relevant_index=5\">https://blog.csdn.net/one_super_dreamer/article/details/104612443?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-104612443-blog-109199889.235%5Ev38%5Epc_relevant_default_base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-104612443-blog-109199889.235%5Ev38%5Epc_relevant_default_base&amp;utm_relevant_index=5</a></p>\n<p><strong><em>python、pytorch、numpy 的版本要对应（版本兼容性很重要）</em></strong></p>\n","categories":["pytorch环境"],"tags":[]},{"title":"git技巧","url":"https://zyyy9.github.io/2023/04/28/git技巧/","content":"<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><p>本地分支是和远程分支独立的，只通过关联进行pull，push操作<br>对！你发现了一个非常关键的点！👏</p>\n<blockquote>\n<p>💥 <strong>如果你只是执行 <code>git checkout -b xxx</code>，默认是基于你当前所在的分支来创建的！</strong></p>\n</blockquote>\n<hr>\n<h3 id=\"🧠-举个例子来说明：\"><a href=\"#🧠-举个例子来说明：\" class=\"headerlink\" title=\"🧠 举个例子来说明：\"></a>🧠 举个例子来说明：</h3><h4 id=\"场景：\"><a href=\"#场景：\" class=\"headerlink\" title=\"场景：\"></a>场景：</h4><p>你刚 clone 完一个项目，默认在 <code>main</code> 分支上。</p>\n<p>然后你执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b my-feature</span><br></pre></td></tr></table></figure>\n\n<p>那么结果是：</p>\n<ul>\n<li><code>my-feature</code> 是基于 <code>main</code> 的</li>\n<li>它的内容和提交历史都是从 <code>main</code> 复制过来的</li>\n</ul>\n<hr>\n<h3 id=\"✅-想基于-dev-创建分支，要这样做：\"><a href=\"#✅-想基于-dev-创建分支，要这样做：\" class=\"headerlink\" title=\"✅ 想基于 dev 创建分支，要这样做：\"></a>✅ 想基于 <code>dev</code> 创建分支，要这样做：</h3><p>你需要<strong>明确指定分支来源</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b my-feature origin/dev</span><br></pre></td></tr></table></figure>\n\n<p>这个意思是：</p>\n<ul>\n<li>用远程的 <code>origin/dev</code> 创建一个新的本地分支 <code>my-feature</code></li>\n<li>并且自动跟踪远程的 <code>origin/dev</code>（也可以不自动）</li>\n</ul>\n<hr>\n<h3 id=\"🔍-或者你可以分两步做得更清晰：\"><a href=\"#🔍-或者你可以分两步做得更清晰：\" class=\"headerlink\" title=\"🔍 或者你可以分两步做得更清晰：\"></a>🔍 或者你可以分两步做得更清晰：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 创建并切换本地 dev 分支</span></span><br><span class=\"line\">git checkout -b dev origin/dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 再基于 dev 创建自己的功能分支</span></span><br><span class=\"line\">git checkout -b my-feature</span><br></pre></td></tr></table></figure>\n\n<p>这样 <code>my-feature</code> 就是从 <code>dev</code> 分支上分出来的，内容就一致了 ✅</p>\n<hr>\n<h3 id=\"🧪-快速对比：\"><a href=\"#🧪-快速对比：\" class=\"headerlink\" title=\"🧪 快速对比：\"></a>🧪 快速对比：</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>基于哪个分支？</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>git checkout -b xxx</code></td>\n<td>当前所在分支 ❗（比如 main）</td>\n</tr>\n<tr>\n<td><code>git checkout -b xxx origin/dev</code></td>\n<td>基于远程的 dev 分支</td>\n</tr>\n<tr>\n<td><code>git checkout -b xxx dev</code></td>\n<td>基于本地的 dev 分支</td>\n</tr>\n</tbody></table>\n<hr>\n","categories":["git"],"tags":[]},{"title":"hexo使用教程","url":"https://zyyy9.github.io/2023/04/28/hexo使用教程/","content":"<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><h2 id=\"进入-d-blog-文件夹\"><a href=\"#进入-d-blog-文件夹\" class=\"headerlink\" title=\"进入 d:\\blog 文件夹\"></a>进入 d:\\blog 文件夹</h2><p>hexo 必须在这个目录下才可运行</p>\n<h2 id=\"启动-hexo\"><a href=\"#启动-hexo\" class=\"headerlink\" title=\"启动 hexo\"></a>启动 hexo</h2><p><code>hexo serve</code></p>\n<h2 id=\"创建新的博客\"><a href=\"#创建新的博客\" class=\"headerlink\" title=\"创建新的博客\"></a>创建新的博客</h2><p>通过 <code>hexo new &quot;My New Post&quot;</code> 生成.md 文档，修改 tags 为 category 进行分类</p>\n<h2 id=\"将文件部署到-github-公共域名上\"><a href=\"#将文件部署到-github-公共域名上\" class=\"headerlink\" title=\"将文件部署到 github 公共域名上\"></a>将文件部署到 github 公共域名上</h2><p><code>hexo clean</code> 进行清理缓存等.<br><code>hexo generate</code> 生成 html 文件.<br>再通过 <code>hexo deploy</code> 进行部署到远程仓库.</p>\n<h2 id=\"修改名字\"><a href=\"#修改名字\" class=\"headerlink\" title=\"修改名字\"></a>修改名字</h2><p>在 d:\\blog 下找到_config.yml，修改 author 名字，即可换作者名称.</p>\n<h1 id=\"备份教程\"><a href=\"#备份教程\" class=\"headerlink\" title=\"备份教程\"></a>备份教程</h1><p>在 blog 目录下新建仓库，并关联远程.<br><code>git remote set-url origin git@github.com:zyyy9/zyyy9.github.io.git</code><br><code>git add .</code><br><code>git commit -m &quot;提交信息&quot;</code><br><code>git push origin blog</code></p>\n<h1 id=\"markdown-语法\"><a href=\"#markdown-语法\" class=\"headerlink\" title=\"markdown 语法\"></a>markdown 语法</h1><p><a href=\"https://markdown.com.cn/\">https://markdown.com.cn/</a></p>\n<h1 id=\"hexo-官方文档\"><a href=\"#hexo-官方文档\" class=\"headerlink\" title=\"hexo 官方文档\"></a>hexo 官方文档</h1><p><a href=\"https://hexo.io/zh-cn/docs/index.html\">https://hexo.io/zh-cn/docs/index.html</a></p>\n","categories":["hexo教程"],"tags":[]},{"title":"category","url":"https://zyyy9.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"https://zyyy9.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://zyyy9.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"https://zyyy9.github.io/link/index.html","content":"","categories":[],"tags":[]}]